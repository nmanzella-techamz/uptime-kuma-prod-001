name: Docker Image CICD
run-name: "${{ github.event.head_commit.message }} (${{ github.sha }})"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  checkout-to-runner:
    name: Checkout to runner
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: checkout-to-runner
    steps:
    - uses: actions/checkout@v4

    - name: Tailscale connection
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:cicd-pipeline

    - name: SSH setup
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_FINGERPRINT" > ~/.ssh/known_hosts
        echo "$SSH_KEY" > ~/.ssh/srv.key
        chmod 600 ~/.ssh/srv.key
        cat >>~/.ssh/config <<END
        Host srv
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/srv.key
          StrictHostKeyChecking no
        END
      env:
        SSH_USER: ${{ secrets.USERNAME }}
        SSH_KEY: ${{ secrets.SSH_PRIV_KEY }}
        SSH_HOST: ${{ secrets.TS_SERVER_IP }}
        SSH_FINGERPRINT: ${{ secrets.SSH_FINGERPRINT }}

    - name: Bring down container on server
      run: >
        ssh srv '
        if [ -f ${{ github.event.repository.name }}/compose.yaml ];
        then cd ${{ github.event.repository.name }} && docker compose down;
        fi
        '

    - name: Delete existing Docker Compose file
      run: >
        ssh srv '
        if [ -f ${{ github.event.repository.name }}/compose.yaml ];
        then cd ${{ github.event.repository.name }} && rm compose.yaml;
        fi
        '

    - name: Deploy files (do not overwrite volumes directory to preserve state)
      run: >
        ssh srv '
        rsync -avh --exclude="volumes/" --exclude=".[!.]*" * srv:/root/${{ github.event.repository.name }};
        '

    - name: Create .env file
      run: >
        ssh srv '
        echo "TS_AUTHKEY=${{ secrets.TS_AUTHKEY_FOR_UPTIME_KUMA }}" > "${{ github.event.repository.name }}/.env";
        '

    - name: Remove old Docker image
      run: >
        ssh srv '
        docker image rm tailscale-uptime-kuma
        docker image rm uptime-kuma
        '

    - name: Always bring up container on server
      if: ${{ always() }}
      run: >
        ssh srv '
        cd ${{ github.event.repository.name }} && docker compose up -d --force-recreate
        '